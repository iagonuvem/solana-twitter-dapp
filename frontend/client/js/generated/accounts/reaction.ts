/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';
import {
  getReactionTypeDecoder,
  getReactionTypeEncoder,
  type ReactionType,
  type ReactionTypeArgs,
} from '../types';

export const REACTION_DISCRIMINATOR = new Uint8Array([
  226, 61, 100, 191, 223, 221, 142, 139,
]);

export function getReactionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(REACTION_DISCRIMINATOR);
}

export type Reaction = {
  discriminator: ReadonlyUint8Array;
  reactionAuthor: Address;
  parentTweet: Address;
  reaction: ReactionType;
  bump: number;
};

export type ReactionArgs = {
  reactionAuthor: Address;
  parentTweet: Address;
  reaction: ReactionTypeArgs;
  bump: number;
};

export function getReactionEncoder(): FixedSizeEncoder<ReactionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['reactionAuthor', getAddressEncoder()],
      ['parentTweet', getAddressEncoder()],
      ['reaction', getReactionTypeEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REACTION_DISCRIMINATOR })
  );
}

export function getReactionDecoder(): FixedSizeDecoder<Reaction> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['reactionAuthor', getAddressDecoder()],
    ['parentTweet', getAddressDecoder()],
    ['reaction', getReactionTypeDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getReactionCodec(): FixedSizeCodec<ReactionArgs, Reaction> {
  return combineCodec(getReactionEncoder(), getReactionDecoder());
}

export function decodeReaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Reaction, TAddress>;
export function decodeReaction<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Reaction, TAddress>;
export function decodeReaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Reaction, TAddress> | MaybeAccount<Reaction, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getReactionDecoder()
  );
}

export async function fetchReaction<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Reaction, TAddress>> {
  const maybeAccount = await fetchMaybeReaction(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeReaction<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Reaction, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeReaction(maybeAccount);
}

export async function fetchAllReaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Reaction>[]> {
  const maybeAccounts = await fetchAllMaybeReaction(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeReaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Reaction>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeReaction(maybeAccount));
}

export function getReactionSize(): number {
  return 74;
}
