/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const COMMENT_DISCRIMINATOR = new Uint8Array([
  150, 135, 96, 244, 55, 199, 50, 65,
]);

export function getCommentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(COMMENT_DISCRIMINATOR);
}

export type Comment = {
  discriminator: ReadonlyUint8Array;
  commentAuthor: Address;
  parentTweet: Address;
  content: string;
  bump: number;
};

export type CommentArgs = {
  commentAuthor: Address;
  parentTweet: Address;
  content: string;
  bump: number;
};

export function getCommentEncoder(): Encoder<CommentArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['commentAuthor', getAddressEncoder()],
      ['parentTweet', getAddressEncoder()],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: COMMENT_DISCRIMINATOR })
  );
}

export function getCommentDecoder(): Decoder<Comment> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['commentAuthor', getAddressDecoder()],
    ['parentTweet', getAddressDecoder()],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['bump', getU8Decoder()],
  ]);
}

export function getCommentCodec(): Codec<CommentArgs, Comment> {
  return combineCodec(getCommentEncoder(), getCommentDecoder());
}

export function decodeComment<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Comment, TAddress>;
export function decodeComment<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Comment, TAddress>;
export function decodeComment<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Comment, TAddress> | MaybeAccount<Comment, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCommentDecoder()
  );
}

export async function fetchComment<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Comment, TAddress>> {
  const maybeAccount = await fetchMaybeComment(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeComment<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Comment, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeComment(maybeAccount);
}

export async function fetchAllComment(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Comment>[]> {
  const maybeAccounts = await fetchAllMaybeComment(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeComment(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Comment>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeComment(maybeAccount));
}
