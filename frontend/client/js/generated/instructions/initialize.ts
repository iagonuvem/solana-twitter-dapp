/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { TWITTER_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

const seed = new TextEncoder().encode("TWEET_SEED");

export const INITIALIZE_DISCRIMINATOR = new Uint8Array([
  175, 175, 109, 31, 13, 152, 155, 237,
]);

export function getInitializeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof TWITTER_PROGRAM_ADDRESS,
  TAccountTweetAuthority extends string | AccountMeta<string> = string,
  TAccountTweet extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTweetAuthority extends string
        ? WritableSignerAccount<TAccountTweetAuthority> &
            AccountSignerMeta<TAccountTweetAuthority>
        : TAccountTweetAuthority,
      TAccountTweet extends string
        ? WritableAccount<TAccountTweet>
        : TAccountTweet,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInstructionData = {
  discriminator: ReadonlyUint8Array;
  topic: string;
  content: string;
};

export type InitializeInstructionDataArgs = { topic: string; content: string };

export function getInitializeInstructionDataEncoder(): Encoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['topic', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })
  );
}

export function getInitializeInstructionDataDecoder(): Decoder<InitializeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['topic', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getInitializeInstructionDataCodec(): Codec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(
    getInitializeInstructionDataEncoder(),
    getInitializeInstructionDataDecoder()
  );
}

export type InitializeAsyncInput<
  TAccountTweetAuthority extends string = string,
  TAccountTweet extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  tweetAuthority: TransactionSigner<TAccountTweetAuthority>;
  tweet?: Address<TAccountTweet>;
  systemProgram?: Address<TAccountSystemProgram>;
  topic: InitializeInstructionDataArgs['topic'];
  content: InitializeInstructionDataArgs['content'];
};

export async function getInitializeInstructionAsync<
  TAccountTweetAuthority extends string,
  TAccountTweet extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TWITTER_PROGRAM_ADDRESS,
>(
  input: InitializeAsyncInput<
    TAccountTweetAuthority,
    TAccountTweet,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeInstruction<
    TProgramAddress,
    TAccountTweetAuthority,
    TAccountTweet,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? TWITTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tweetAuthority: { value: input.tweetAuthority ?? null, isWritable: true },
    tweet: { value: input.tweet ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tweet.value) {
    accounts.tweet.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getUtf8Encoder().encode(
          expectSome(args.topic)
        ),
        seed,
        getAddressEncoder().encode(
          expectAddress(accounts.tweetAuthority.value)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tweetAuthority),
      getAccountMeta(accounts.tweet),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountTweetAuthority,
    TAccountTweet,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeInput<
  TAccountTweetAuthority extends string = string,
  TAccountTweet extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  tweetAuthority: TransactionSigner<TAccountTweetAuthority>;
  tweet: Address<TAccountTweet>;
  systemProgram?: Address<TAccountSystemProgram>;
  topic: InitializeInstructionDataArgs['topic'];
  content: InitializeInstructionDataArgs['content'];
};

export function getInitializeInstruction<
  TAccountTweetAuthority extends string,
  TAccountTweet extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TWITTER_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountTweetAuthority,
    TAccountTweet,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInstruction<
  TProgramAddress,
  TAccountTweetAuthority,
  TAccountTweet,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TWITTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tweetAuthority: { value: input.tweetAuthority ?? null, isWritable: true },
    tweet: { value: input.tweet ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tweetAuthority),
      getAccountMeta(accounts.tweet),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode(
      args as InitializeInstructionDataArgs
    ),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountTweetAuthority,
    TAccountTweet,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeInstruction<
  TProgram extends string = typeof TWITTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    tweetAuthority: TAccountMetas[0];
    tweet: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeInstructionData;
};

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tweetAuthority: getNextAccount(),
      tweet: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
