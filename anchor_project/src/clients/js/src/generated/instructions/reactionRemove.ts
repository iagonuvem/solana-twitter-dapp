/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TWITTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REACTION_REMOVE_DISCRIMINATOR = new Uint8Array([
  119, 25, 175, 136, 240, 235, 230, 164,
]);

export function getReactionRemoveDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REACTION_REMOVE_DISCRIMINATOR
  );
}

export type ReactionRemoveInstruction<
  TProgram extends string = typeof TWITTER_PROGRAM_ADDRESS,
  TAccountReactionAuthor extends string | AccountMeta<string> = string,
  TAccountTweetReaction extends string | AccountMeta<string> = string,
  TAccountTweet extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountReactionAuthor extends string
        ? WritableSignerAccount<TAccountReactionAuthor> &
            AccountSignerMeta<TAccountReactionAuthor>
        : TAccountReactionAuthor,
      TAccountTweetReaction extends string
        ? WritableAccount<TAccountTweetReaction>
        : TAccountTweetReaction,
      TAccountTweet extends string
        ? WritableAccount<TAccountTweet>
        : TAccountTweet,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ReactionRemoveInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ReactionRemoveInstructionDataArgs = {};

export function getReactionRemoveInstructionDataEncoder(): FixedSizeEncoder<ReactionRemoveInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: REACTION_REMOVE_DISCRIMINATOR })
  );
}

export function getReactionRemoveInstructionDataDecoder(): FixedSizeDecoder<ReactionRemoveInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getReactionRemoveInstructionDataCodec(): FixedSizeCodec<
  ReactionRemoveInstructionDataArgs,
  ReactionRemoveInstructionData
> {
  return combineCodec(
    getReactionRemoveInstructionDataEncoder(),
    getReactionRemoveInstructionDataDecoder()
  );
}

export type ReactionRemoveInput<
  TAccountReactionAuthor extends string = string,
  TAccountTweetReaction extends string = string,
  TAccountTweet extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  reactionAuthor: TransactionSigner<TAccountReactionAuthor>;
  tweetReaction: Address<TAccountTweetReaction>;
  tweet: Address<TAccountTweet>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getReactionRemoveInstruction<
  TAccountReactionAuthor extends string,
  TAccountTweetReaction extends string,
  TAccountTweet extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof TWITTER_PROGRAM_ADDRESS,
>(
  input: ReactionRemoveInput<
    TAccountReactionAuthor,
    TAccountTweetReaction,
    TAccountTweet,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ReactionRemoveInstruction<
  TProgramAddress,
  TAccountReactionAuthor,
  TAccountTweetReaction,
  TAccountTweet,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? TWITTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    reactionAuthor: { value: input.reactionAuthor ?? null, isWritable: true },
    tweetReaction: { value: input.tweetReaction ?? null, isWritable: true },
    tweet: { value: input.tweet ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.reactionAuthor),
      getAccountMeta(accounts.tweetReaction),
      getAccountMeta(accounts.tweet),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getReactionRemoveInstructionDataEncoder().encode({}),
  } as ReactionRemoveInstruction<
    TProgramAddress,
    TAccountReactionAuthor,
    TAccountTweetReaction,
    TAccountTweet,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedReactionRemoveInstruction<
  TProgram extends string = typeof TWITTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    reactionAuthor: TAccountMetas[0];
    tweetReaction: TAccountMetas[1];
    tweet: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: ReactionRemoveInstructionData;
};

export function parseReactionRemoveInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedReactionRemoveInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      reactionAuthor: getNextAccount(),
      tweetReaction: getNextAccount(),
      tweet: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getReactionRemoveInstructionDataDecoder().decode(instruction.data),
  };
}
