/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { TWITTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const COMMENT_REMOVE_DISCRIMINATOR = new Uint8Array([
  10, 190, 215, 145, 65, 59, 112, 197,
]);

export function getCommentRemoveDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COMMENT_REMOVE_DISCRIMINATOR
  );
}

export type CommentRemoveInstruction<
  TProgram extends string = typeof TWITTER_PROGRAM_ADDRESS,
  TAccountCommentAuthor extends string | AccountMeta<string> = string,
  TAccountComment extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCommentAuthor extends string
        ? WritableSignerAccount<TAccountCommentAuthor> &
            AccountSignerMeta<TAccountCommentAuthor>
        : TAccountCommentAuthor,
      TAccountComment extends string
        ? WritableAccount<TAccountComment>
        : TAccountComment,
      ...TRemainingAccounts,
    ]
  >;

export type CommentRemoveInstructionData = {
  discriminator: ReadonlyUint8Array;
  commentContent: string;
};

export type CommentRemoveInstructionDataArgs = { commentContent: string };

export function getCommentRemoveInstructionDataEncoder(): Encoder<CommentRemoveInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'commentContent',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: COMMENT_REMOVE_DISCRIMINATOR })
  );
}

export function getCommentRemoveInstructionDataDecoder(): Decoder<CommentRemoveInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['commentContent', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getCommentRemoveInstructionDataCodec(): Codec<
  CommentRemoveInstructionDataArgs,
  CommentRemoveInstructionData
> {
  return combineCodec(
    getCommentRemoveInstructionDataEncoder(),
    getCommentRemoveInstructionDataDecoder()
  );
}

export type CommentRemoveInput<
  TAccountCommentAuthor extends string = string,
  TAccountComment extends string = string,
> = {
  commentAuthor: TransactionSigner<TAccountCommentAuthor>;
  comment: Address<TAccountComment>;
  commentContent: CommentRemoveInstructionDataArgs['commentContent'];
};

export function getCommentRemoveInstruction<
  TAccountCommentAuthor extends string,
  TAccountComment extends string,
  TProgramAddress extends Address = typeof TWITTER_PROGRAM_ADDRESS,
>(
  input: CommentRemoveInput<TAccountCommentAuthor, TAccountComment>,
  config?: { programAddress?: TProgramAddress }
): CommentRemoveInstruction<
  TProgramAddress,
  TAccountCommentAuthor,
  TAccountComment
> {
  // Program address.
  const programAddress = config?.programAddress ?? TWITTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    commentAuthor: { value: input.commentAuthor ?? null, isWritable: true },
    comment: { value: input.comment ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.commentAuthor),
      getAccountMeta(accounts.comment),
    ],
    programAddress,
    data: getCommentRemoveInstructionDataEncoder().encode(
      args as CommentRemoveInstructionDataArgs
    ),
  } as CommentRemoveInstruction<
    TProgramAddress,
    TAccountCommentAuthor,
    TAccountComment
  >;

  return instruction;
}

export type ParsedCommentRemoveInstruction<
  TProgram extends string = typeof TWITTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    commentAuthor: TAccountMetas[0];
    comment: TAccountMetas[1];
  };
  data: CommentRemoveInstructionData;
};

export function parseCommentRemoveInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCommentRemoveInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      commentAuthor: getNextAccount(),
      comment: getNextAccount(),
    },
    data: getCommentRemoveInstructionDataDecoder().decode(instruction.data),
  };
}
