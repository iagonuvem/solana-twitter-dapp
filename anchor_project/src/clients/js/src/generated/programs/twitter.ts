/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCommentRemoveInstruction,
  type ParsedCommentTweetInstruction,
  type ParsedDislikeTweetInstruction,
  type ParsedInitializeInstruction,
  type ParsedLikeTweetInstruction,
  type ParsedReactionRemoveInstruction,
} from '../instructions';

export const TWITTER_PROGRAM_ADDRESS =
  'yuSXtGfd255QhTFq2HMRwwm6QEvJuz7LnHKqN5aTWZ2' as Address<'yuSXtGfd255QhTFq2HMRwwm6QEvJuz7LnHKqN5aTWZ2'>;

export enum TwitterAccount {
  Comment,
  Reaction,
  Tweet,
}

export function identifyTwitterAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TwitterAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([150, 135, 96, 244, 55, 199, 50, 65])
      ),
      0
    )
  ) {
    return TwitterAccount.Comment;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([226, 61, 100, 191, 223, 221, 142, 139])
      ),
      0
    )
  ) {
    return TwitterAccount.Reaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([229, 13, 110, 58, 118, 6, 20, 79])
      ),
      0
    )
  ) {
    return TwitterAccount.Tweet;
  }
  throw new Error(
    'The provided account could not be identified as a twitter account.'
  );
}

export enum TwitterInstruction {
  CommentRemove,
  CommentTweet,
  DislikeTweet,
  Initialize,
  LikeTweet,
  ReactionRemove,
}

export function identifyTwitterInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): TwitterInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 190, 215, 145, 65, 59, 112, 197])
      ),
      0
    )
  ) {
    return TwitterInstruction.CommentRemove;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([26, 45, 20, 239, 43, 253, 168, 37])
      ),
      0
    )
  ) {
    return TwitterInstruction.CommentTweet;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([40, 221, 179, 49, 162, 224, 64, 97])
      ),
      0
    )
  ) {
    return TwitterInstruction.DislikeTweet;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return TwitterInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([248, 27, 137, 254, 228, 130, 141, 149])
      ),
      0
    )
  ) {
    return TwitterInstruction.LikeTweet;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([119, 25, 175, 136, 240, 235, 230, 164])
      ),
      0
    )
  ) {
    return TwitterInstruction.ReactionRemove;
  }
  throw new Error(
    'The provided instruction could not be identified as a twitter instruction.'
  );
}

export type ParsedTwitterInstruction<
  TProgram extends string = 'yuSXtGfd255QhTFq2HMRwwm6QEvJuz7LnHKqN5aTWZ2',
> =
  | ({
      instructionType: TwitterInstruction.CommentRemove;
    } & ParsedCommentRemoveInstruction<TProgram>)
  | ({
      instructionType: TwitterInstruction.CommentTweet;
    } & ParsedCommentTweetInstruction<TProgram>)
  | ({
      instructionType: TwitterInstruction.DislikeTweet;
    } & ParsedDislikeTweetInstruction<TProgram>)
  | ({
      instructionType: TwitterInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: TwitterInstruction.LikeTweet;
    } & ParsedLikeTweetInstruction<TProgram>)
  | ({
      instructionType: TwitterInstruction.ReactionRemove;
    } & ParsedReactionRemoveInstruction<TProgram>);
