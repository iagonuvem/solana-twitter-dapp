/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const TWEET_DISCRIMINATOR = new Uint8Array([
  229, 13, 110, 58, 118, 6, 20, 79,
]);

export function getTweetDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TWEET_DISCRIMINATOR);
}

export type Tweet = {
  discriminator: ReadonlyUint8Array;
  tweetAuthor: Address;
  topic: string;
  content: string;
  likes: bigint;
  dislikes: bigint;
  bump: number;
};

export type TweetArgs = {
  tweetAuthor: Address;
  topic: string;
  content: string;
  likes: number | bigint;
  dislikes: number | bigint;
  bump: number;
};

export function getTweetEncoder(): Encoder<TweetArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['tweetAuthor', getAddressEncoder()],
      ['topic', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['likes', getU64Encoder()],
      ['dislikes', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: TWEET_DISCRIMINATOR })
  );
}

export function getTweetDecoder(): Decoder<Tweet> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['tweetAuthor', getAddressDecoder()],
    ['topic', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['likes', getU64Decoder()],
    ['dislikes', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getTweetCodec(): Codec<TweetArgs, Tweet> {
  return combineCodec(getTweetEncoder(), getTweetDecoder());
}

export function decodeTweet<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Tweet, TAddress>;
export function decodeTweet<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Tweet, TAddress>;
export function decodeTweet<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Tweet, TAddress> | MaybeAccount<Tweet, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTweetDecoder()
  );
}

export async function fetchTweet<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Tweet, TAddress>> {
  const maybeAccount = await fetchMaybeTweet(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTweet<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Tweet, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTweet(maybeAccount);
}

export async function fetchAllTweet(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Tweet>[]> {
  const maybeAccounts = await fetchAllMaybeTweet(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTweet(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Tweet>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTweet(maybeAccount));
}
