//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const INITIALIZE_DISCRIMINATOR: [u8; 8] = [175, 175, 109, 31, 13, 152, 155, 237];

/// Accounts.
#[derive(Debug)]
pub struct Initialize {
      
              
          pub tweet_authority: solana_pubkey::Pubkey,
          
              
          pub tweet: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl Initialize {
  pub fn instruction(&self, args: InitializeInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: InitializeInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.tweet_authority,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.tweet,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&InitializeInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::TWITTER_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitializeInstructionData {
            discriminator: [u8; 8],
                  }

impl InitializeInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
                                              }
  }
}

impl Default for InitializeInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitializeInstructionArgs {
                  pub topic: String,
                pub content: String,
      }


/// Instruction builder for `Initialize`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` tweet_authority
                ///   1. `[writable]` tweet
                ///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializeBuilder {
            tweet_authority: Option<solana_pubkey::Pubkey>,
                tweet: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                        topic: Option<String>,
                content: Option<String>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitializeBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn tweet_authority(&mut self, tweet_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.tweet_authority = Some(tweet_authority);
                    self
    }
            #[inline(always)]
    pub fn tweet(&mut self, tweet: solana_pubkey::Pubkey) -> &mut Self {
                        self.tweet = Some(tweet);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn topic(&mut self, topic: String) -> &mut Self {
        self.topic = Some(topic);
        self
      }
                #[inline(always)]
      pub fn content(&mut self, content: String) -> &mut Self {
        self.content = Some(content);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = Initialize {
                              tweet_authority: self.tweet_authority.expect("tweet_authority is not set"),
                                        tweet: self.tweet.expect("tweet is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                      };
          let args = InitializeInstructionArgs {
                                                              topic: self.topic.clone().expect("topic is not set"),
                                                                  content: self.content.clone().expect("content is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `initialize` CPI accounts.
  pub struct InitializeCpiAccounts<'a, 'b> {
          
                    
              pub tweet_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub tweet: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `initialize` CPI instruction.
pub struct InitializeCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub tweet_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub tweet: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: InitializeInstructionArgs,
  }

impl<'a, 'b> InitializeCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: InitializeCpiAccounts<'a, 'b>,
              args: InitializeInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              tweet_authority: accounts.tweet_authority,
              tweet: accounts.tweet,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(3+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.tweet_authority.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.tweet.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&InitializeInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::TWITTER_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.tweet_authority.clone());
                        account_infos.push(self.tweet.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `Initialize` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` tweet_authority
                ///   1. `[writable]` tweet
          ///   2. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitializeCpiBuilder<'a, 'b> {
  instruction: Box<InitializeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitializeCpiBuilderInstruction {
      __program: program,
              tweet_authority: None,
              tweet: None,
              system_program: None,
                                            topic: None,
                                content: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn tweet_authority(&mut self, tweet_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tweet_authority = Some(tweet_authority);
                    self
    }
      #[inline(always)]
    pub fn tweet(&mut self, tweet: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tweet = Some(tweet);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn topic(&mut self, topic: String) -> &mut Self {
        self.instruction.topic = Some(topic);
        self
      }
                #[inline(always)]
      pub fn content(&mut self, content: String) -> &mut Self {
        self.instruction.content = Some(content);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = InitializeInstructionArgs {
                                                              topic: self.instruction.topic.clone().expect("topic is not set"),
                                                                  content: self.instruction.content.clone().expect("content is not set"),
                                    };
        let instruction = InitializeCpi {
        __program: self.instruction.__program,
                  
          tweet_authority: self.instruction.tweet_authority.expect("tweet_authority is not set"),
                  
          tweet: self.instruction.tweet.expect("tweet is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitializeCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            tweet_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                tweet: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        topic: Option<String>,
                content: Option<String>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

